use clap::ValueEnum;
use rand::Rng;

#[derive(ValueEnum, Debug, Clone, Copy)]
pub enum InitPattern {
    Random,
    SimpleExtinct,
    SimpleStable,
    GosperGlider,
    RPentomino,
    Max,
    PufferShip,
    Spider,
    Hotcrystal0,
    P76PiPentominoHassler,
}

impl InitPattern {
    pub fn as_str(&self) -> &'static str {
        match self {
            InitPattern::Random => "Random",
            InitPattern::SimpleExtinct => "Simple Extinct",
            InitPattern::SimpleStable => "Simple Stable",
            InitPattern::GosperGlider => "Gosper Glider",
            InitPattern::RPentomino => "R-pentomino",
            InitPattern::Max => "Max",
            InitPattern::PufferShip => "Puffer Ship",
            InitPattern::Spider => "Spider",
            InitPattern::Hotcrystal0 => "Hotcrystal0",
            InitPattern::P76PiPentominoHassler => "p76 pi-heptomino hassler",
        }
    }

    pub fn grid(&self) -> String {
        match self {
            InitPattern::Random => random(),
            InitPattern::SimpleExtinct => SIMPLE_EXTINCT.to_string(),
            InitPattern::SimpleStable => SIMPLE_STABLE.to_string(),
            InitPattern::GosperGlider => GOSPER_GLIDER.to_string(),
            InitPattern::RPentomino => R_PENTOMINO.to_string(),
            InitPattern::Max => MAX.to_string(),
            InitPattern::PufferShip => PUFFER_SHIP.to_string(),
            InitPattern::Spider => SPIDER.to_string(),
            InitPattern::Hotcrystal0 => HOTCRYSTAL_0.to_string(),
            InitPattern::P76PiPentominoHassler => P76_PI_PENTOMINO_HASSLER.to_string(),
        }
    }

    pub fn all() -> Vec<(InitPattern, &'static str)> {
        vec![
            (InitPattern::Random, InitPattern::Random.as_str()),
            (
                InitPattern::SimpleExtinct,
                InitPattern::SimpleExtinct.as_str(),
            ),
            (
                InitPattern::SimpleStable,
                InitPattern::SimpleStable.as_str(),
            ),
            (
                InitPattern::GosperGlider,
                InitPattern::GosperGlider.as_str(),
            ),
            (InitPattern::RPentomino, InitPattern::RPentomino.as_str()),
            (InitPattern::Max, InitPattern::Max.as_str()),
            (InitPattern::PufferShip, InitPattern::PufferShip.as_str()),
            (InitPattern::Hotcrystal0, InitPattern::Hotcrystal0.as_str()),
            (
                InitPattern::P76PiPentominoHassler,
                InitPattern::P76PiPentominoHassler.as_str(),
            ),
        ]
    }
}

impl TryFrom<String> for InitPattern {
    type Error = &'static str;
    fn try_from(value: String) -> Result<InitPattern, Self::Error> {
        for (p, s) in InitPattern::all().into_iter() {
            if s == value {
                return Ok(p);
            }
        }
        Err("unknown pattern")
    }
}

fn random() -> String {
    let mut rng = rand::thread_rng();
    let mut out = "".to_string();
    for _ in 0..20 {
        for _ in 0..40 {
            out.push_str(if rng.gen_range(0..=1) == 1 { "O" } else { "." })
        }
        out.push_str("\n")
    }
    out.trim_end().to_string()
}

const SIMPLE_EXTINCT: &str = "\
.O.
O.O
...";

const SIMPLE_STABLE: &str = "\
OO
OO";

const GOSPER_GLIDER: &str = "\
........................................................
........................................................
........................................................
........................................................
........................................................
..................................O.....................
................................O.O.....................
......................OO......OO............OO..........
.....................O...O....OO............OO..........
..........OO........O.....O...OO........................
..........OO........O...O.OO....O.O.....................
....................O.....O.......O.....................
.....................O...O..............................
......................OO................................
........................................................
........................................................
........................................................
........................................................
........................................................
........................................................";

const R_PENTOMINO: &str = "\
.OO
OO.
.O.";

const MAX: &str = "\
O.O.O.OO...O.O..OOO...OO.
OOO.O...O...O...OO...OOO.
...OOOO..O.OO...O.O.O.O..
..OOO.O..OO.O.OOO...O.O.O
OOOOOOOO..OO.OO..O.OO..O.
..OO.O.OO.O.O...O.O.O.OOO
OO..O..OO....O...O......O
O..O.O...O.OOO.OOOO..O.O.
O..O......OO..OOOOO...OOO
..OO.O.O.OOO..O....OOO...
OO....O.O.......OOOOOO.OO
...OO.O..OO.OO.OO..O.OO.O
O...O..OOOO.OOO..O......O
O.OO....O.......OOO.OO...
OO.O.O..OO.O.O...O...O.OO
...OO..O.O...O..O..O.OO..
OO.OOOO.OO.....OO.O.....O
.OO..OOO..OO.O.OO...OO..O
O..O....O.OO.......OOO.OO
O..OO..OO.OOOO......OOO..
..O.O.O.O.........O...O..
......O.O.OO...OOO....OOO
OOO.OO.O..OO...O...OO.OO.
.OOO.O.OO..O..O.O.....O.O
OOO...OOO..OO.....OO..O..";

const PUFFER_SHIP: &str = "\
...................O...........O...................
..................O.O.........O.O..................
.................OO.OO.......OO.OO.................
.................O...............O.................
.................OOO..O.....O..OOO.................
...............O.......O...O.......O...............
................OO..OO.OO.OO.OO..OO................
................O.O....O...O....O.O................
.............OOO.OOO..OO...OO..OOO.OOO.............
.............OO.OOOO.OOO...OOO.OOOO.OO.............
..............OOOO....OO...OO....OOOO..............
...............O.....OO.....OO.....O...............
...................O..O.....O..O...................
..................OOO.O.....O.OOO..................
.................O.....OO.OO.....O.................
................OOO.OO.OO.OO.OO.OOO................
.............OO.OO...............OO.OO.............
............OO.OO.OO.OOOO.OOOO.OO.OO.OO............
......................OO...OO......................
.............O.......................O.............
..........OO.OO......O.......O......OO.OO..........
...........OO........OO.....OO........OO...........
...................................................
......................OOO.OOO......................
.........O...............................O.........
........OOO.............................OOO........
.......OO.OO............OOO............OO.OO.......
......OOO..............O...O..............OOO......
......OO..............O.....O..............OO......
......OOO...............O.O...............OOO......
........O..............O.O.O..............O........
........................O.O........................
.......OO.............OO.O.OO.............OO.......
....OO.O.............O.O.O.O.O.............O.OO....
....O..O............O.O.....O.O............O..O....
......O.................OOO.................O......
..OO................OO..OOO..OO................OO..
.O.OO.........................................OO.O.
.O.OO.........................................OO.O.
OO...............................................OO
OO.O...........................................O.OO
..OOO.........................................OOO..
..OOO.........................................OOO..";

const SPIDER: &str = "\
.........O.......O.........
...OO.O.O.OO...OO.O.O.OO...
OOO.O.OOO.........OOO.O.OOO
O...O.O.....O.O.....O.O...O
....OO......O.O......OO....
.OO.........O.O.........OO.
.OO.OO...............OO.OO.
.....O...............O.....";

const HOTCRYSTAL_0: &str = "\
...........OO....................O.........
............O..................OOO...OO....
............O.O...............O........O.OO
.............OO...............OO...O..O..OO
...................................O.O.....
...........................OO.......O......
...........................OO..............
....................................OO.....
....................................OO.....
...........................................
...........................................
.......OO........OO........................
.......OO..........O.......................
................O..........................
.................OO...O....................
......OOO.............OO...................
......OO.O..OO.......O.O...................
........OO..OO.............................
........OO....................OOOO.........
.............................O....O........
.............................O...O.O.......
..............................O...O.O......
.........................O..........O......
........................OO..........O......
........................OO.......O..O......
........................O.........OO.......
...........................................
...........................................
.....OO....................................
.....O.O...................................
......OOO.....OO...........................
.......OO.....OO...........................
.....O.O...................................
OO..O.O....OO..............................
O.O..O......O..............................
.OOOO....OOO...............................
..OO.....O.................................";

const P76_PI_PENTOMINO_HASSLER: &str = "\
.OO....................
O.O....................
O.O.OO.................
.O.O.O.................
...O...................
..OO...................
.OOO...................
.OOO........O.O........
.OOO........O.O........
.OOO........OOO........
..OO...................
...O...................
.O.O.O.................
O.O.OO.................
O.O....................
.OO....................
.......................
.......................
.......................
.............OOO.......
.......................
...........O...........
...........O...........
...........O...........
...................OO..
.............OOO...O.O.
.....................O.
.....................OO";
